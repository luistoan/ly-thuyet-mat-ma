{"version":3,"sources":["components/Login.js","components/Register.js","App.js","serviceWorker.js","index.js"],"names":["Login","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","username","password","e","_e$target","target","name","value","setState","_this$state","axios","post","headers","Content-Type","Access-Control-Allow-Origin","then","success","data","status","toast","error","console","log","react_default","a","createElement","className","data-validate","type","onChange","onChangeValue","bind","placeholder","data-placeholder","style","textAlign","react_router_dom","to","onClick","login","Component","Register","repass","toLogin","_this2","gotoLogin","react_router","App","exact","path","component","react_toastify","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.755045fe.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport axios from \"axios\"\r\nimport { toast } from 'react-toastify';\r\nimport  { Link } from 'react-router-dom'\r\n\r\nclass Login extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            username: \"\",\r\n            password: \"\"\r\n        }\r\n    }\r\n\r\n    onChangeValue(e) {\r\n        \r\n        const {name, value} = e.target;\r\n        if(value) {\r\n            if(name === \"username\") {\r\n                this.setState({username: value});\r\n            } else {\r\n                this.setState({password: value});\r\n            }\r\n        }\r\n    } \r\n\r\n    login() {\r\n        const {username, password} = this.state;\r\n        if(!username || !password) {\r\n            console.log(\"not login!\");\r\n            return;\r\n        }\r\n\r\n        let config = {\r\n            headers : {\r\n                \"Content-Type\": \"application/json\",\r\n                'Access-Control-Allow-Origin': '*' \r\n            }\r\n        }\r\n\r\n        axios.post('http://localhost:8080/api/login', {username, password}, config).then(success => {\r\n            if(success.data && success.data.status) {\r\n                toast.success(\"Login successful!\")\r\n            } else {\r\n                toast.error(\"Username or password is wrong!\")\r\n            }\r\n        }, error => {\r\n            toast(\"Server Error!\")\r\n        })\r\n        console.log(username, password)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"limiter\">\r\n                <div className=\"container-login100\" >\r\n                    <div className=\"wrap-login100 p-t-30 p-b-50\">\r\n                        <span className=\"login100-form-title p-b-41\">\r\n                            Account Login\r\n                        </span>\r\n                        <div className=\"login100-form validate-form p-b-33 p-t-5\">\r\n        \r\n                            <div className=\"wrap-input100 validate-input\" data-validate = \"Enter username\">\r\n                                <input className=\"input100\" type=\"text\" onChange={this.onChangeValue.bind(this)} name=\"username\" placeholder=\"User name\"/>\r\n                                <span className=\"focus-input100\" data-placeholder=\"&#xe82a;\"></span>\r\n                            </div>\r\n        \r\n                            <div className=\"wrap-input100 validate-input\" data-validate=\"Enter password\">\r\n                                <input className=\"input100\" type=\"password\" onChange={this.onChangeValue.bind(this)} name=\"pass\" placeholder=\"Password\"/>\r\n                                <span className=\"focus-input100\" data-placeholder=\"&#xe80f;\"></span>\r\n                            </div>\r\n\r\n                            <div style={{textAlign: \"center\"}}>\r\n                                <Link to=\"/register\">Go to Register</Link>\r\n                            </div>\r\n        \r\n                            <div className=\"container-login100-form-btn m-t-32\">\r\n                                <button className=\"login100-form-btn\" onClick={this.login.bind(this)}>\r\n                                    Login\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n  }\r\n}\r\n\r\nexport default Login;\r\n","import React, {Component} from 'react';\r\nimport axios from \"axios\"\r\nimport { toast } from 'react-toastify';\r\nimport { Redirect, Link } from 'react-router-dom'\r\n\r\nclass Register extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            username: \"\",\r\n            password: \"\",\r\n            repass: \"\",\r\n            toLogin: false\r\n        }\r\n    }\r\n\r\n    onChangeValue(e) {\r\n        \r\n        const {name, value} = e.target;\r\n        if(value) {\r\n            if(name === \"username\") {\r\n                this.setState({username: value});\r\n            } else if(name === 'password') {\r\n                this.setState({password: value});\r\n            } else {\r\n                this.setState({repass: value})\r\n            }\r\n        }\r\n    } \r\n\r\n    login() {\r\n        const {username, password, repass} = this.state;\r\n\r\n        if(!username || !password || !repass) {\r\n            toast.error(\"all fields cannot be null!\")\r\n            return;\r\n        }\r\n\r\n        if(repass !== password) {\r\n            toast.error(\"repass doesn't match password!\")\r\n            return\r\n        }\r\n\r\n        let config = {\r\n            headers : {\r\n                \"Content-Type\": \"application/json\",\r\n                'Access-Control-Allow-Origin': '*' \r\n            }\r\n        }\r\n\r\n        axios.post('http://localhost:8080/api/users', {username, password}, config).then(success => {\r\n            \r\n            if(success.data && success.data.status) {\r\n                toast.success(\"New Account created!\")\r\n                this.gotoLogin();\r\n            } else {\r\n                toast.error(\"Account already existed!\")\r\n            }\r\n        }, error => {\r\n            toast.error(\"server error!\")\r\n        })\r\n    }\r\n\r\n    gotoLogin() {\r\n        this.setState({toLogin: true})\r\n    }\r\n\r\n    render() {\r\n        if(this.state.toLogin) {\r\n            return <Redirect to=\"/\" />\r\n        }\r\n        return (\r\n            <div className=\"limiter\">\r\n                <div className=\"container-login100\" >\r\n                    <div className=\"wrap-login100 p-t-30 p-b-50\">\r\n                        <span className=\"login100-form-title p-b-41\">\r\n                            Create account\r\n                        </span>\r\n                        <div className=\"login100-form validate-form p-b-33 p-t-5\">\r\n        \r\n                            <div className=\"wrap-input100 validate-input\" data-validate = \"Enter username\">\r\n                                <input className=\"input100\" type=\"text\" onChange={this.onChangeValue.bind(this)} name=\"username\" placeholder=\"User name\"/>\r\n                                <span className=\"focus-input100\" data-placeholder=\"&#xe82a;\"></span>\r\n                            </div>\r\n        \r\n                            <div className=\"wrap-input100 validate-input\" data-validate=\"Enter password\">\r\n                                <input className=\"input100\" type=\"password\" onChange={this.onChangeValue.bind(this)} name=\"password\" placeholder=\"Password\"/>\r\n                                <span className=\"focus-input100\" data-placeholder=\"&#xe80f;\"></span>\r\n                            </div>\r\n\r\n                            <div className=\"wrap-input100 validate-input\" data-validate=\"Re-Enter password\">\r\n                                <input className=\"input100\" type=\"password\" onChange={this.onChangeValue.bind(this)} name=\"repass\" placeholder=\"Password\"/>\r\n                                <span className=\"focus-input100\" data-placeholder=\"&#xe80f;\"></span>\r\n                            </div>\r\n\r\n                            <div style={{textAlign: \"center\"}}>\r\n                                <Link to=\"/\">Back to Login</Link>\r\n                            </div>\r\n        \r\n                            <div className=\"container-login100-form-btn m-t-32\">\r\n                                <button className=\"login100-form-btn\" onClick={this.login.bind(this)}>\r\n                                    Login\r\n                                </button>\r\n                            </div>\r\n                            \r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n  }\r\n}\r\n\r\nexport default Register;\r\n","import React, {Component} from 'react';\r\nimport {BrowserRouter, Route, Switch } from 'react-router-dom'\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport { ToastContainer } from 'react-toastify';\r\n\r\nimport Login from './components/Login'\r\nimport Register from './components/Register'\r\n\r\nclass App extends Component {\r\n\r\n    render() {\r\n        \r\n        return (\r\n            <div>\r\n                <BrowserRouter>\r\n                    <Switch>\r\n                        <Route exact path='/' component={Login}/>\r\n                        <Route exact path='/register' component={Register}/>\r\n                    </Switch>\r\n                </BrowserRouter>\r\n                <ToastContainer />\r\n            </div>\r\n        );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}